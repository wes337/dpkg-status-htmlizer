{"version":3,"sources":["data/status.real","App.js","parse.js","serviceWorker.js","index.js"],"names":["module","exports","App","fileReader","FileReader","useState","file","setFile","packages","setPackages","pkg","description","depends","selectedPackage","setSelectedPackage","useEffect","init386","selectedPackageElement","document","querySelector","scrollIntoView","behavior","parseDpkgStatus","parsed","statusFile","packagesArray","split","packagesObjects","forEach","packageItem","packageObject","line","keys","match","length","keyName","toLowerCase","keyValue","push","sort","a","b","package","filter","parseDpkg","result","handleClick","className","href","rel","target","statusData","name","id","type","onChange","e","files","htmlFor","disabled","onClick","onloadend","readAsText","handleFile","map","i","key","dependsArray","replace","dependencies","Set","dep","find","role","tabIndex","renderDependencies","dependants","renderDependants","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e3b92df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/status.efe3c243.real\";","import React, { useState, useEffect } from 'react'\nimport parseDpkg from './parse'\nimport init386 from '386-animation'\nimport * as statusData from './data/status.real'\nimport '386-animation/386.css'\nimport './App.scss'\n\nfunction App() {\n  const fileReader = new FileReader()\n  const [file, setFile] = useState()\n  const [packages, setPackages] = useState(null)\n  const [selectedPackage, setSelectedPackage] = useState({\n    pkg: '',\n    description: '',\n    depends: [],\n  })\n\n  useEffect(() => {\n    init386() // https://github.com/wes337/386-animation\n  }, [])\n\n  useEffect(() => {\n    const selectedPackageElement = document.querySelector('.selected--package')\n    selectedPackageElement && selectedPackageElement.scrollIntoView({\n      behavior: 'smooth'\n    })\n  }, [selectedPackage])\n\n  const parseDpkgStatus = () => {\n    const file = fileReader.result\n    const parsed = parseDpkg(file)\n\n    setPackages(parsed)\n  }\n\n  const handleFile = (file) => {\n    if (file) {\n      fileReader.onloadend = parseDpkgStatus\n      fileReader.readAsText(file)\n    }\n  }\n\n  const handleClick = (packageObject) => {\n    const { package: pkg, description, depends } = packageObject\n    setSelectedPackage({\n      pkg,\n      description,\n      depends,\n    })\n  }\n\n  const renderDependencies = () => {\n    const { depends } = selectedPackage\n    if (!depends || depends.length <= 0) {\n      return\n    }\n\n    const dependsArray = depends\n      .replace(/\\s*\\(.*?\\)\\s*/g, '')\n      .split(/, |\\|/g)\n\n    // remove duplicates since we removed dependency versions\n    const dependencies = [ ...new Set(dependsArray) ]\n    \n    return (\n      <div>\n        <div className=\"label\">Dependencies</div>\n        <ul className=\"list\">\n          {dependencies.map((dep, i) => { \n            const pkg = packages.find(pkg => pkg.package === dep)\n            if (pkg) {\n              return (\n                <li\n                  className=\"list-item\"\n                  key={`${dep}-${i}`}\n                  onClick={() => handleClick(pkg)}\n                  role=\"link\"\n                  tabIndex={0}\n                >\n                  {dep}\n                </li>\n              )\n            }\n            return null\n          }\n          )}\n        </ul>\n      </div>\n    )\n  }\n\n  const renderDependants = () => {\n    const dependants = packages.filter(pkg => {\n      if (!pkg || !pkg.depends) {\n        return false\n      }\n      return pkg.depends === selectedPackage.pkg\n    })\n    \n    if (dependants && dependants.length <= 0) {\n      return\n    }\n\n    return (\n      <div>\n        <div className=\"label\">Dependants</div>\n        <ul className=\"list\">\n          {dependants.map((dep, i) => (\n            <li\n              className=\"list-item\"\n              key={`${dep.package}-${i}`}\n              onClick={() => handleClick(dep)}\n              role=\"link\"\n              tabIndex={0}\n            >\n              {dep.package}\n            </li>)\n          )}\n        </ul>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"dpkg__status__htmlizer\">\n      <section className=\"header\">\n        <h1>DPKG HTMLizer 2000&trade;</h1>\n        <a className=\"source__link\" href=\"https://github.com/wes337/dpkg-status-htmlizer\" rel=\"noopener noreferrer\" target=\"_blank\">&lt;&#47;&gt; Source Code</a>\n        <p>\n          Select your DPKG status file, then press the <span>HTMLize</span> button.<br />\n          <em>Don't have a DPKG status file? Use this <a href={statusData} rel=\"noopener noreferrer\" target=\"_blank\">example</a> file.</em>\n        </p>\n      </section>\n      <section className=\"input\">\n        <input className=\"file__input\" name=\"file\" id=\"file\" type=\"file\" onChange={e => setFile(e.target.files[0])} />\n        <label className=\"file__input--button\" htmlFor=\"file\">\n          {file ? file.name : 'Select a file'}\n        </label>\n        <button className=\"file__input--button htmlize\" disabled={!file} onClick={() => handleFile(file)}>HTMLize!</button>\n      </section>\n      {packages && packages.length === 0 && <div className=\"error\">Couldn't find any packages in that file!</div>}\n      {packages && packages.length > 0 &&\n        <>\n          <section className=\"package__list\">\n            <div className=\"package__list--container\">\n              {packages.map((pkg, i) => (\n                <button\n                  className={selectedPackage.pkg === pkg.package ? 'selected--package' : ''}\n                  key={`${pkg.package}--${i}`}\n                  onClick={() => handleClick(pkg)}\n                  type=\"button\"\n                >\n                  {pkg.package}\n                </button>\n              ))}\n            </div>\n          </section>\n          <section className=\"package__info\">\n            {packages && packages.length > 0 && !selectedPackage.pkg \n              ? <div className=\"package__info--select\">Please select a package from the list.</div>\n              : (<>\n                  <div className=\"package__info--name\">{selectedPackage.pkg}</div>\n                  <div className=\"package__info--description\">{selectedPackage.description}</div>\n                  <hr />\n                  <div className=\"package__info--deps\">\n                    {renderDependencies()}\n                    {renderDependants()}\n                  </div>\n                </>)}\n          </section>\n        </>\n      }\n      <section className=\"footer\">\n        <a className=\"footer__link\" href=\"https://www.github.com/wes337\" rel=\"noopener noreferrer\" target=\"_blank\">\n          <span className=\"name\">Wes Moses</span>\n          <span className=\"slash\">&#47;&#47;</span>\n          <span className=\"username\">wes337</span>\n        </a>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","export default function parseDpkg(statusFile) {\n  const packagesArray = statusFile.split('\\n\\n')\n  const packagesObjects = []\n\n  packagesArray.forEach((packageItem) => {\n    const packageObject = {}\n    const packageLines = packageItem.split('\\n')\n\n    packageLines.forEach(line => {\n      const keys = line.match(/(^[\\w:]+):\\s(.+)/)\n      if (keys && keys.length >= 3) {\n        const keyName = keys[1].toLowerCase()\n        const keyValue = keys[2]\n        packageObject[keyName] = keyValue\n      }\n    })\n    packagesObjects.push(packageObject)\n  })\n\n  packagesObjects.sort((a, b) => {\n    if (a.package < b.package) {\n      return -1\n    }\n    if (a.package > b.package) {\n      return 1\n    }\n    return 0\n  })\n\n  return packagesObjects.filter(packageItem => packageItem.package && packageItem.package.length > 0)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}